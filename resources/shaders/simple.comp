#version 450

#define SHARED_MEM 1
#define group_size_x 256
layout(local_size_x = group_size_x) in;

layout(push_constant) uniform params {
  uint len;
} PushConstant;

layout(std430, binding = 0) buffer Data
{
  float data[];
};

layout(std430, binding = 1) buffer Diff
{
  float diff[];
};

shared float values[group_size_x + 6];

void main() 
{
  uint idx = gl_GlobalInvocationID.x;
  #if SHARED_MEM
    if (idx < PushConstant.len)
    {
      values[gl_LocalInvocationID.x] = idx < 3 ? 0.0 : data[idx - 3];

      values[gl_LocalInvocationID.x + 3] = data[idx];
      
      values[gl_LocalInvocationID.x + 6] = idx + 3 >= PushConstant.len ? 0.0 : data[idx + 3]; 

      barrier();
      float sum = 0.0;
      for (int i = -3; i <= 3; ++i) {
        sum += values[gl_LocalInvocationID.x + 3 + i];
      }
      sum /= 7.0f;

      diff[idx] = values[gl_LocalInvocationID.x + 3] - sum;
    }
  #else
    if (idx < PushConstant.len) 
    {
      uint lBorder = idx < 3 ? 0 : idx - 3;
      uint rBorder = min(idx + 4, PushConstant.len);

      float sum = 0.0;
      for (uint i = lBorder; i < rBorder; ++i) {
        sum += data[i];
      }
      sum /= 7.0f;

      diff[idx] = data[idx] - sum;
    }
  #endif
}