#version 450

#define WORK_GROUP_AXIS_SIZE 128
const float SIGMA = 20.0;

layout(local_size_x = WORK_GROUP_AXIS_SIZE) in;

layout(push_constant) uniform params {
  uint width;
} PushConstant;

layout(binding = 0, rgba8) uniform readonly image2D srcImage;
layout(binding = 1, rgba8) uniform writeonly image2D dstImage;

const int R = int(ceil(3.0 * SIGMA));
const int WINDOW_LEN = WORK_GROUP_AXIS_SIZE + 2 * R;
shared vec3 window[WINDOW_LEN];

void main() {
  if (gl_GlobalInvocationID.x < PushConstant.width) {
    uint offset = 0;
    ivec2 globalID = ivec2(gl_GlobalInvocationID.xy) - ivec2(R, 0);

    while (offset + gl_LocalInvocationID.x < WINDOW_LEN) {
      window[offset + gl_LocalInvocationID.x] = imageLoad(srcImage, globalID + ivec2(offset, 0)).rgb;
      offset += WORK_GROUP_AXIS_SIZE;
    }

    const float G_DIVISOR = sqrt(2 * 3.1415 * SIGMA * SIGMA);
    barrier();

    vec3 resColor = window[gl_LocalInvocationID.x + R] / G_DIVISOR;
    for (int i = 1; i <= R; ++i) {
      resColor += (window[gl_LocalInvocationID.x + R - i] + window[gl_LocalInvocationID.x + R + i]) * 
        vec3(exp(-(i * i) / (2 * SIGMA * SIGMA)) / G_DIVISOR);
    }

    imageStore(dstImage, ivec2(gl_GlobalInvocationID.yx), vec4(resColor, 1.0));
  }
}